import {
  CallSignatureDeclarationStructure,
  ConstructSignatureDeclarationStructure,
  IndexSignatureDeclarationStructure,
  InterfaceDeclarationStructure,
  JSDocStructure,
  MethodSignatureStructure,
  OptionalKind,
  PropertySignatureStructure,
  StructureKind,
  TypeParameterDeclarationStructure,
  WriterFunction,
} from "ts-morph";

import {
  stringOrWriterFunction
} from "../types/ts-morph-native.mjs";

import {
  CloneableStructure
} from "../types/CloneableStructure.mjs";
import TypeParameterDeclarationImpl from "./TypeParameterDeclarationImpl.mjs";
import { stringOrWriterFunctionArray } from "./utilities.mjs";
import MethodSignatureImpl from "./MethodSignatureImpl.mjs";

export default class InterfaceDeclarationImpl
implements InterfaceDeclarationStructure
{
  leadingTrivia: stringOrWriterFunction[] = [];
  trailingTrivia: stringOrWriterFunction[] = [];
  name: string;
  readonly kind: StructureKind.Interface = StructureKind.Interface;
  extends: stringOrWriterFunction[] = [];
  typeParameters: TypeParameterDeclarationImpl[] = [];
  docs: (string | JSDocImpl)[] = [];
  hasDeclareKeyword: boolean | undefined = undefined;
  isExported: boolean | undefined = undefined;
  isDefaultExport: boolean | undefined = undefined;
  callSignatures: OptionalKind<CallSignatureDeclarationStructure>[] = [];
  constructSignatures: OptionalKind<ConstructSignatureDeclarationStructure>[] = [];
  indexSignatures: OptionalKind<IndexSignatureDeclarationStructure>[] = [];
  methods: MethodSignatureImpl[] = [];
  properties: OptionalKind<PropertySignatureStructure>[] = [];

  constructor(
    name: string
  )
  {
    this.name = name;
  }

  public static clone(
    other: OptionalKind<InterfaceDeclarationStructure>
  ): InterfaceDeclarationImpl
  {
    const declaration = new InterfaceDeclarationImpl(other.name);

    if (Array.isArray(other.docs)) {
      clone.docs = other.docs.map(doc => {
        if (typeof doc === "string")
          return doc;
        return JSDocImpl.clone(doc);
      })
    }

    return declaration;
  }
}
InterfaceDeclarationImpl satisfies CloneableStructure<InterfaceDeclarationStructure>;
