/*
We will wrap the Membrane constructor in a Membrane, to protect the internal API
from public usage.  This is known as "eating your own dogfood" in software
engineering parlance.  Not only is it an additional proof-of-concept that the
Membrane works, but it will help ensure external consumers of the membrane
module cannot rewrite how each individual Membrane works.
*/
var Membrane = MembraneInternal;
if (false) {
  /* This provides a weak reference to each proxy coming out of a Membrane.
   *
   * Why have this tracking mechanism?  The "dogfood" membrane must ensure any
   * value it returns to an external customer is not wrapped in both the
   * "dogfood" membrane and another membrane.  This double-wrapping is harmful
   * for performance and causes unintended bugs.
   *
   * To do that, on any returned value, the "dogfood" membrane will follow this
   * algorithm:
   * (1) Let value be the value the "dogfood" membrane's "public" object graph
   *     handler would normally return.
   * (2) Let dogfood be the "dogfood" membrane.
   * (3) Let map be dogfood.map.get(value).  This will be a ProxyCylinder
   *     instance belonging to the "dogfood" membrane.
   * (4) Let original be map.getOriginal().
   * (5) Let x be ProxyToMembraneMap.has(original).  This will either be true if
   *     original refers to a MembraneInternal instance, or false if there is no
   *     such reference.
   * (6) If x is false, return value.
   * (7) Otherwise, value has been incorrectly wrapped.  Return original.
   *
   * The reference is weak because we do not want to risk leaking memory with
   * strong references to the ProxyCylinder instance.  The ProxyCylinder instance
   * is referenced only by proxies exported from any Membrane, via another
   * WeakMap the ProxyCylinder belongs to.
   */
  function voidFunc() {}

  const DogfoodLogger = {
    _errorList: [],
    error: function(e) {
      this._errorList.push(e);
    },
    warn: voidFunc,
    info: voidFunc,
    debug: voidFunc,
    trace: voidFunc,

    getFirstError: function() {
      return this._errorList.length ? this._errorList[0] : undefined;
    }
  };

  var DogfoodMembrane = (
  /* start included membrane constructor */
