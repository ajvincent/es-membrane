/**
 * @typeParam MethodType - The type of the original method.
 * @param methodName       - The name of the method we want to call, which we get from each component via Reflect.
 * @param initialArguments - The initial arguments to pass to the starting target.
 * @returns The original target method's type.
 */
#INVOKE_SYMBOL<
    MethodType extends AnyFunction,
>
(
    methodName: PropertyKey,
    initialArguments: Parameters<MethodType>
) : ReturnType<MethodType>
{
    const map = ComponentMap.getMapForInstance(this);

    const startTarget = map.startComponent;
    if (!startTarget)
        throw new Error("assertion failure: we should have a start target");

    // This is safe because we're in a protected method.
    const passThrough = map.buildPassThrough<MethodType>(
        this, methodName, initialArguments
    );

    passThrough.callTarget(startTarget);
    const [hasReturn, result] = passThrough.getReturnValue();
    if (!hasReturn)
        throw new Error("No resolved result!");

    return result;
}
