// #region preamble
import type { Class } from "type-fest";

import {
  DefaultWeakMap
} from "#stage_utilities/source/DefaultMap.mjs"

import type {
  ClassDecoratorFunction
} from "#stage_utilities/source/types/ClassDecoratorFunction.mjs";

import type {
  MethodsOnlyInternal
} from "#stub_classes/source/base/types/MethodsOnlyInternal.mjs";

import type {
  VoidMethodsOnly,
} from "#stub_classes/source/base/types/export-types.mjs";

import type {
  IndeterminateClass
} from "../../source/stubs/decorators/IndeterminateReturn.mjs";

type PushableArray<T> = ReadonlyArray<T> & Pick<T[], "push">;
type UnshiftableArray<T> = ReadonlyArray<T> & Pick<T[], "push" | "unshift">;

// #endregion preamble

// #region AspectsBuilder

class AspectsBuilder<Type extends MethodsOnlyInternal> {
//@ASPECTS_BUILDER_FIELDS

  constructor(baseBuilder: AspectsBuilder<Type> | null) {
    if (baseBuilder) {
//@ASPECTS_BUILDER_CONSTRUCTOR
    }
  }
}

const PrototypeToAspectBuilderMap = new DefaultWeakMap<
  MethodsOnlyInternal, // prototype of the class
  AspectsBuilder<MethodsOnlyInternal>
>;

export function getAspectBuilderForClass<Type extends MethodsOnlyInternal>(
  _class: Class<Type>
): AspectsBuilder<Type>
{
  return PrototypeToAspectBuilderMap.getDefault(
    _class.prototype as Type,
    (): AspectsBuilder<MethodsOnlyInternal> => {
      const proto = Reflect.getPrototypeOf(_class.prototype as Type) as Type;

      const baseBuilder: AspectsBuilder<MethodsOnlyInternal> | null =
        PrototypeToAspectBuilderMap.get(proto) ?? null;

      return new AspectsBuilder<MethodsOnlyInternal>(baseBuilder);
    }
  ) as AspectsBuilder<Type>;
}

// #endregion AspectsBuilder

// #region AspectsDictionary

export class AspectsDictionary<Type extends MethodsOnlyInternal>
{
//@ASPECTS_DICTIONARY_CLASS_FIELDS
}

const InstanceToAspectDictionaryMap = new WeakMap<
  MethodsOnlyInternal,
  AspectsDictionary<MethodsOnlyInternal>
>;

export function buildAspectDictionaryForDriver<
  Type extends MethodsOnlyInternal
>
(
  __driver__: Type,
  __wrapped__: Type,
): AspectsDictionary<Type>
{
  const __proto__ = Reflect.getPrototypeOf(__driver__) as Type & { constructor: Class<Type>}
  const __builder__: AspectsBuilder<Type> = getAspectBuilderForClass<Type>(
    __proto__.constructor
  );

  const __dictionary__ = new AspectsDictionary<Type>;

//@ASPECTS_BUILDER_FOREACH

  InstanceToAspectDictionaryMap.set(__driver__, __dictionary__);
  return __dictionary__;
}

export function getAspectDictionaryForDriver<
  Type extends MethodsOnlyInternal
>
(
  __driver__: Type,
): AspectsDictionary<Type>
{
  const __dictionary__ = InstanceToAspectDictionaryMap.get(__driver__);
  if (!__dictionary__) {
    throw new Error("Unknown driver for aspect dictionary!");
  }
  return __dictionary__;
}

// #endregion AspectsDictionary

// #region Aspect decorators

interface AspectDecoratorsInterface<Type extends MethodsOnlyInternal> {
//@ASPECTS_DECORATORS_INTERFACE
}

class AspectDecoratorsClass<Type extends MethodsOnlyInternal>
implements AspectDecoratorsInterface<Type>
{
//@ASPECTS_DECORATORS_CLASS
}

const AspectDecorators = new AspectDecoratorsClass<MethodsOnlyInternal>;

export function getAspectDecorators<
  Type extends MethodsOnlyInternal
>(): AspectDecoratorsClass<Type>
{
  return AspectDecorators as AspectDecoratorsClass<Type>;
}

// #endregion Aspect decorators

export const AspectsBuilderKeys: ReadonlyArray<string> = [
//@ASPECTS_BUILDER_KEYS
];
